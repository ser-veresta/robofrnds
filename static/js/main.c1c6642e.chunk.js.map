{"version":3,"sources":["components/Scroll.js","containers/Errorboundary.js","components/Card.js","components/CardList.js","components/SearchComponent.js","containers/App.js","serviceWorker.js","index.js"],"names":["Scroll","props","style","overflow","border","height","children","ErrorBoundary","state","hasError","error","info","this","setState","React","Component","Card","className","src","id","alt","name","email","CardList","Robots","cardComponent","map","user","i","key","SearchComponent","searchChange","type","placeholder","onChange","App","onSearchChange","event","searchfield","target","value","robots","fetch","then","response","json","users","filterrobots","filter","robot","toLowerCase","includes","Errorboundary","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"8NAUeA,EARA,SAACC,GACZ,OACI,yBAAKC,MAAO,CAACC,SAAU,SAAUC,OAAQ,kBAAoBC,OAAQ,UAChEJ,EAAMK,WCoBJC,E,kDApBX,WAAYN,GAAO,IAAD,8BACd,cAAMA,IACDO,MAAQ,CACTC,UAAU,GAHA,E,8DAOAC,EAAMC,GACpBC,KAAKC,SAAS,CAACJ,UAAU,M,+BAIzB,OAAIG,KAAKJ,MAAMC,SACJ,+DAEJG,KAAKX,MAAMK,a,GAhBEQ,IAAMC,WCUnBC,EAZF,SAACf,GACV,OACI,yBAAKgB,UAAU,kEACX,yBAAKC,IAAG,+BAA0BjB,EAAMkB,GAAhC,YAA8CC,IAAI,iBAC1D,6BACI,4BAAKnB,EAAMoB,MACX,2BAAIpB,EAAMqB,UCMXC,EAXE,SAAC,GAAc,IAAbC,EAAY,EAAZA,OACTC,EAAgBD,EAAOE,KAAI,SAACC,EAAKC,GACnC,OAAO,kBAAC,EAAD,CAAMC,IAAKL,EAAOI,GAAGT,GAAIA,GAAIK,EAAOI,GAAGT,GAAIE,KAAMG,EAAOI,GAAGP,KAAMC,MAAOE,EAAOI,GAAGN,WAE7F,OACI,6BACKG,ICEEK,EARS,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,aACtB,OACI,6BACI,2BAAOd,UAAU,oCAAoCe,KAAK,SAASC,YAAY,gBAAgBC,SAAUH,MCyCtGI,G,wDArCX,aAAe,IAAD,8BACV,gBAOJC,eAAiB,SAACC,GACd,EAAKxB,SAAS,CAACyB,YAAaD,EAAME,OAAOC,SAPzC,EAAKhC,MAAQ,CACTiC,OAAQ,GACRH,YAAa,IAJP,E,gEAYO,IAAD,OAChBI,MAAM,yDAAyDC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAAQF,MAAK,SAAAG,GAAK,OAAG,EAAKjC,SAAS,CAAC4B,OAAQK,S,+BAG/H,IAAD,OACCC,EAAenC,KAAKJ,MAAMiC,OAAOO,QAAO,SAAAC,GAC1C,OACIA,EAAM5B,KAAK6B,cAAcC,SAAS,EAAK3C,MAAM8B,YAAYY,kBAIjE,OACI,yBAAKjC,UAAU,MACX,wBAAIA,UAAU,WAAd,iBACA,kBAAC,EAAD,CAAiBc,aAAgBnB,KAAKwB,iBACtC,kBAAC,EAAD,KACI,kBAACgB,EAAD,KACI,kBAAC,EAAD,CAAU5B,OAAUuB,W,GA9B1BjC,IAAMC,YCGJsC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBtB,MAAK,SAAAuB,GACJA,EAAaC,gBAEdC,OAAM,SAAA1D,GACL2D,QAAQ3D,MAAMA,EAAM4D,a","file":"static/js/main.c1c6642e.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Scroll = (props) => {\r\n    return (\r\n        <div style={{overflow: 'scroll', border: '3px solid black',  height: '500px'}}>\r\n            {props.children}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Scroll;","import React from 'react';\r\n\r\n\r\n\r\nclass ErrorBoundary extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            hasError: false\r\n        }\r\n    }\r\n\r\n    componentDidCatch(error,info) {\r\n        this.setState({hasError: true})\r\n    }\r\n\r\n    render() {\r\n        if (this.state.hasError) {\r\n            return <h1>oops......something went wrong.</h1>;\r\n        }\r\n        return this.props.children;\r\n    }\r\n}\r\n\r\n\r\nexport default ErrorBoundary;","import React from 'react';\r\n\r\nconst Card = (props) =>{\r\n    return(\r\n        <div className=\" tc bg-light-blue dib br3 pa3 ma3 grow bw2 shadow-5 border-box\">\r\n            <img src={`https://robohash.org/${props.id}?200x200`} alt=\"robot photos\" />\r\n            <div>\r\n                <h4>{props.name}</h4>\r\n                <p>{props.email}</p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card'\r\n\r\nconst CardList = ({Robots}) => {\r\n    const cardComponent = Robots.map((user,i) => {\r\n        return <Card key={Robots[i].id} id={Robots[i].id} name={Robots[i].name} email={Robots[i].email} />\r\n    })\r\n    return (\r\n        <div>\r\n            {cardComponent}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\n\r\nconst SearchComponent = ({searchChange}) => {\r\n    return (\r\n        <div>\r\n            <input className=\"pa2 ba b--blue bg-light-green br2\" type=\"search\" placeholder=\"search Robots\" onChange={searchChange}/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SearchComponent;","import React from 'react';\r\nimport Scroll from '../components/Scroll';\r\nimport Errorboundary from './Errorboundary';\r\nimport CardList from '../components/CardList';\r\nimport SearchComponent from '../components/SearchComponent';\r\nimport \"./App.css\";\r\n\r\n\r\n\r\nclass App extends React.Component {\r\n    constructor() {\r\n        super()\r\n        this.state = {\r\n            robots: [],\r\n            searchfield: \"\"\r\n        }\r\n    }\r\n\r\n    onSearchChange = (event) => {\r\n        this.setState({searchfield: event.target.value})\r\n    }\r\n\r\n    componentDidMount() {\r\n        fetch(\"https://jsonplaceholder.typicode.com/posts/1/comments\").then(response => response.json()).then(users =>this.setState({robots: users}))\r\n    }\r\n\r\n    render() {\r\n        const filterrobots = this.state.robots.filter(robot => {\r\n            return (\r\n                robot.name.toLowerCase().includes(this.state.searchfield.toLowerCase())\r\n            );\r\n        })\r\n\r\n        return(\r\n            <div className=\"tc\">\r\n                <h1 className=\"head f1\">Robot Friends</h1>\r\n                <SearchComponent searchChange = {this.onSearchChange} />\r\n                <Scroll>\r\n                    <Errorboundary>\r\n                        <CardList Robots = {filterrobots} />\r\n                    </Errorboundary>\r\n                </Scroll>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}